{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Phylogeny Embedding  &amp;   Approximate Representation"},{"location":"index.html#goldman-group-european-bioinformatics-institute","title":"Goldman Group - European Bioinformatics Institute","text":"<p>PEAR can: 1. Compute the distance matrix given a set of phylogenetic trees; 2. Embed and represent the distance matrix in 2D or 3D.</p> <p>See also the  autogenerated documentation  and  PyPI .</p>"},{"location":"index.html#pear-usage","title":"PEAR usage","text":"<p>Pear is both a python software and library. It can be installed with <code>python -m pip install pear_ebi</code> or downloaded from Github. Pear is currently compatible only with Linux.</p>"},{"location":"index.html#pear-as-a-python-library","title":"PEAR as a python library","text":"<p>Once installed, Pear can be used to upload newick trees in python and represent them in embedded spaces. We recommend to use it on either jupyter notebook or lab, as these tools allow for more interaction with the graphs. On these platforms, the user is allowed to interact with widgets that allows to modify several parameteres of the plots. For specific uses and applications, see the examples.</p>"},{"location":"index.html#pear-as-a-program","title":"PEAR as a program","text":"<p>Run <code>pear_ebi --help</code> to see the complete list of arguments and flags.</p>"},{"location":"index.html#simple-usage","title":"Simple usage","text":"<p><code>pear_ebi examples_tree_sets/beast_trees/beast_run1.trees -m hashrf_RF</code></p> <p>this script calculates the unweighted Robison Foulds distances between the trees in the file \"beast_run1.trees\", which contains 1001 phylogenetic trees.</p> <p>the flag -m indicates the method used to compute the dissimilarity between phylogeneic trees. In this case, HasRF has been used.</p> <p>To embed these distances in a lower-dimensional space, we can use PCoA (MDS) or tSNE:</p> <p><code>pear_ebi examples_tree_sets/beast_trees/beast_run1.trees -m hashrf_RF --pcoa 2</code></p> <p>we therefore embedded the distance matrix in 2 dimensions. Using the flag -quality one can assess the correlation between the distances in the N-dimensional space and in the embedding.</p> <p><code>pear_ebi examples_tree_sets/beast_trees/beast_run1.trees -m hashrf_RF --pcoa 2 --plot</code></p> <p>The flag -plot indicates that PEAR has to plot the embeddings and show them, respectively. If an embedding method is specified the plots are produced anyway. Plotting doesn't require any indication on the number of dimensions as the embeddings are represented in 2 dimensions if the distances are embedded in 2 dimensions, while it plots on 2 and 3 dimensions in any other case.</p> <p>One can specify any number of files containing trees. Moreover, it is possible to specify a single directory using -dir, and possibly a pattern using -pattern, in order to select multiple files.</p>"},{"location":"index.html#tree-set","title":"Tree Set","text":"<p>It's possible to compute the distance matrix and re-use it in subsequent runs of PEAR by specifying the distance matrix file with the flag -d. Additionally, it's possible to define the name of the output file (-o).</p> <p>If any additional metadata is available, this may be specified by indicating a .csv file containing a dataframe of compatible shape.</p>"},{"location":"index.html#config-file","title":"Config file","text":"<p>A standard config toml file can be used for specific emebddings of multiple sets of trees. Instances of toml files are reported in the examples folder.</p> <p>Using the config file allows one to use all the features of PEAR, including additional embedding methods and plot designs. The config file can also be used to specify lists of indexes of interesting trees in the sets, in order to highlight them in the final plots.</p>"},{"location":"index.html#interactive-mode","title":"Interactive mode","text":"<p><code>pear_ebi -i</code> : this script launches the program in the interactive mode. Once the program starts, it is going to guide you through its usage thanks to an intuitive interface.</p>"},{"location":"index.html#turorials-and-examples","title":"Turorials and Examples","text":"<p>Follow this link for a complete set of basic and avanced guides and tutorials to use PEAR on the command line and as a python library.</p>"},{"location":"index.html#licensing","title":"Licensing","text":"<p>This project is released under the terms of the MIT Open Source License. View LICENSE.txt for more information.</p>"},{"location":"modules/gendoc.html","title":"Gendoc","text":""},{"location":"modules/gendoc.html#add_val","title":"add_val","text":"<p>source <pre><code>.add_val(\n   indices, value, data\n)\n</code></pre></p>"},{"location":"modules/gendoc.html#automate_mkdocs_from_docstring","title":"automate_mkdocs_from_docstring","text":"<p>source <pre><code>.automate_mkdocs_from_docstring(\n   mkdocs_dir: Union[str, Path], mkgendocs_f: str, repo_dir: Path,\n   match_string: str\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>list  : list of created markdown files and their relative paths</li> </ul>"},{"location":"modules/gendoc.html#automate_nav_structure","title":"automate_nav_structure","text":"<p>source <pre><code>.automate_nav_structure(\n   mkdocs_dir: Union[str, Path], mkdocs_f: str, repo_dir: Path, match_string: str,\n   structure: dict\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>str  : feedback message</li> </ul>"},{"location":"modules/gendoc.html#fix","title":"fix","text":"<p>source <pre><code>.fix(\n   f\n)\n</code></pre></p> <p>Allows creation of arbitrary length dict item</p> <p>Args</p> <ul> <li>f (type) : Description of parameter <code>f</code>.</li> </ul> <p>Returns</p> <ul> <li>type  : Description of returned object.</li> </ul>"},{"location":"modules/gendoc.html#indent","title":"indent","text":"<p>source <pre><code>.indent(\n   string: str\n)\n</code></pre></p> <p>Count the indentation in whitespace characters.</p> <p>Args</p> <ul> <li>string (str) : text with indents</li> </ul> <p>Returns</p> <ul> <li>int  : Number of whitespace indentations</li> </ul>"},{"location":"modules/pear_ebi/tree_emb_parser.html","title":"Tree emb parser","text":""},{"location":"modules/pear_ebi/tree_emb_parser.html#parser","title":"parser","text":"<p>source <pre><code>.parser()\n</code></pre></p> <p>Generates parser for PEAR program</p> <p>Returns</p> <ul> <li>parser  : PEAR parser</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html","title":"Tree set","text":""},{"location":"modules/pear_ebi/tree_set.html#tree_set","title":"tree_set","text":"<p>source <pre><code>tree_set(\n   file, output_file = None, distance_matrix = None, metadata = None\n)\n</code></pre></p> <p>Class for the analysis of a set of phylogenetic trees</p> <p>Methods:</p>"},{"location":"modules/pear_ebi/tree_set.html#calculate_distances","title":".calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   method\n)\n</code></pre></p> <p>Computes tree_set distance matrix with method of choice</p> <p>Args</p> <ul> <li>method (str) : method/algorithm used to compute distance matrix</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#embed","title":".embed","text":"<p>source <pre><code>.embed(\n   method, dimensions, quality = False, report = False\n)\n</code></pre></p> <p>Compute embedding with n-dimensions and method of choice</p> <p>Args</p> <ul> <li>method (str) : method of choice to embed data</li> <li>dimensions (type) : number of dimensions/components</li> <li>quality (bool, optional) : returns quality report and self.emb_quality. Defaults to False.</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#plot_2d","title":".plot_2D","text":"<p>source <pre><code>.plot_2D(\n   method, save = False, name_plot = None, static = False, plot_meta = 'SET-ID',\n   plot_set = None, select = False, same_scale = False\n)\n</code></pre></p> <p>Plot 2D embedding performed with method of choice</p> <p>Args</p> <ul> <li>method (str) : embedding method</li> <li>save (bool, optional) : save plot HTML. Defaults to False.</li> <li>name_plot (str, optional) : name of plot's file. Defaults to None.</li> <li>static (bool, optional) : return less interactive plot. Defaults to False.</li> <li>plot_meta (str, optional) : meta-variale used to color the points. Defaults to \"SET-ID\".</li> <li>plot_set (list, optional) : list of sets to plot from set_collection. Defaults to None.</li> <li>select (bool, optional) : return set of buttons to show or hide specific traces. Defaults to False.</li> <li>same_scale (bool, optional) : use same color_scale for all traces when scale is continuous. Defaults to False.</li> </ul> <p>Raises</p> <ul> <li>ValueError  : method can only be either pcoa or tsne for now</li> </ul> <p>Returns</p> <ul> <li>plot  : either interactive or not</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#plot_3d","title":".plot_3D","text":"<p>source <pre><code>.plot_3D(\n   method, save = False, name_plot = None, static = False, plot_meta = 'SET-ID',\n   plot_set = None, select = False, same_scale = False, z_axis = None\n)\n</code></pre></p> <p>Plot 3D embedding performed with method of choice</p> <p>Args</p> <ul> <li>method (str) : embedding method</li> <li>save (bool, optional) : save plot HTML. Defaults to False.</li> <li>name_plot (str, optional) : name of plot's file. Defaults to None.</li> <li>static (bool, optional) : return less interactive plot. Defaults to False.</li> <li>plot_meta (str, optional) : meta-variale used to color the points. Defaults to \"SET-ID\".</li> <li>plot_set (list, optional) : list of sets to plot from set_collection. Defaults to None.</li> <li>select (bool, optional) : return set of buttons to show or hide specific traces. Defaults to False.</li> <li>same_scale (bool, optional) : use same color_scale for all traces when scale is continuous. Defaults to False.</li> </ul> <p>Raises</p> <ul> <li>ValueError  : method can only be either pcoa or tsne for now</li> </ul> <p>Returns</p> <ul> <li>plot  : either interactive or not</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#get_subset","title":".get_subset","text":"<p>source <pre><code>.get_subset(\n   n_required, method = 'sequence'\n)\n</code></pre></p> <p>Gets subset of phylogenetic trees</p> <p>Args</p> <ul> <li>n_required (int) : number of points to extract</li> <li>method (str, optional) : method used to extact points ('sequence', 'random', 'syst'). Defaults to \"sequence\".</li> </ul> <p>Returns</p> <ul> <li>plots  : 2D and 3D embedding plots of subset</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#set_collection","title":"set_collection","text":"<p>source <pre><code>set_collection(\n   collection = list(), file = 'Set_collection_', output_file = None,\n   distance_matrix = None, metadata = None\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"modules/pear_ebi/tree_set.html#calculate_distances_1","title":".calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   method\n)\n</code></pre></p> <p>Computes tree_set distance matrix with method of choice</p> <p>Args</p> <ul> <li>method (str) : method/algorithm used to compute distance matrix</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#concatenate","title":".concatenate","text":"<p>source <pre><code>.concatenate(\n   other\n)\n</code></pre></p> <p>Concatenates two collectionsor collection and tree_set</p> <p>Args</p> <ul> <li>other (tree_set ot set_colletion) : tree_set ot set_colletion</li> </ul> <p>Returns</p> <ul> <li>set_collection  : concatenated set_collection</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/hashrf.html","title":"Hashrf","text":""},{"location":"modules/pear_ebi/calculate_distances/hashrf.html#bash_command","title":"bash_command","text":"<p>source <pre><code>.bash_command(\n   cmd\n)\n</code></pre></p> <p>Executes bash command in subprocess</p> <p>Args</p> <ul> <li>cmd (str) : bash command to be runned in subprocess</li> </ul> <p>Returns</p> <ul> <li>0  : returns 0 if everything's alright</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/hashrf.html#hashrf","title":"hashrf","text":"<p>source <pre><code>.hashrf(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes unweighted Robison Foulds distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/hashrf.html#hashrf_weighted","title":"hashrf_weighted","text":"<p>source <pre><code>.hashrf_weighted(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes weighted Robison Foulds distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html","title":"maple RF","text":""},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#tree","title":"Tree","text":"<p>source <pre><code>Tree(\n   name = '', children = None, dist = 3.3e-05\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#add_child","title":".add_child","text":"<p>source <pre><code>.add_child(\n   node\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#readnewick","title":"readNewick","text":"<p>source <pre><code>.readNewick(\n   tree_list, defaultBLen = 3.3e-05, normalizeInputBLen = 1.0\n)\n</code></pre></p> <p>From a list of strings defining phylogenetic trees in newick format, returns a list of Tree instances containing the biartitions of the tree in a modularized form, suitable for comparisons with other trees.</p> <p>Args</p> <ul> <li>tree_list (list) : list of trees in newick format.</li> <li>defaultBLen (float, optional) : default branch length. Defaults to 0.000033.</li> <li>normalizeInputBLen (float, optional) : value used to normalize branch lenghts. Defaults to 1.0.</li> </ul> <p>Returns</p> <ul> <li>trees  : list of Tree instances</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#preparetreecomparison","title":"prepareTreeComparison","text":"<p>source <pre><code>.prepareTreeComparison(\n   t1, rooted = False, minimumBLen = 6e-06\n)\n</code></pre></p> <p>Prepares newick tree for comparison</p> <p>Args</p> <ul> <li>t1 (str) : input tree</li> <li>rooted (bool, optional) : set to True if t1 is rooted, default ro False</li> <li>minimumBLen (float, optional) : minimum value for branch length, default to 6E-6</li> </ul> <p>Returns</p> <ul> <li>metrics (tuple of values) (leafNameDict, nodeTable, leafCount, numBranches, leafDistDict, branchLengthDict, sumBranchLengths,) : tree metrics among which the RFL.</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#robinsonfouldswithday1985","title":"RobinsonFouldsWithDay1985","text":"<p>source <pre><code>.RobinsonFouldsWithDay1985(\n   t2, t1, rooted = False, minimumBLen = 6e-06\n)\n</code></pre></p> <p>Computes Robison Foulds distances using Day's algorithm</p> <p>Args</p> <ul> <li>t2 (string) : newick tree to be compared to t1</li> <li>t1 (tuple) : t1 after preprocessing using prepareTreeComparison()</li> <li>rooted (bool, optional) : True if t2 is rooted. Defaults to False.</li> <li>minimumBLen (float, optional) : minimum branch length. Defaults to 0.000006.</li> </ul> <p>Returns</p> <ul> <li>parameters (tuple) (numDiffs, float(numDiffs) / (normalization), leafCount, foundBranches, missedBranches, (numBranches - foundBranches), RFL) : results of comparison, among which the RF distance (numDiffs).</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#calculate_distance_matrix","title":"calculate_distance_matrix","text":"<p>source <pre><code>.calculate_distance_matrix(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes the whole pipeline that calculates the pairwise distances in a collection of trees</p> <p>Args</p> <ul> <li>file (str) : file containing the newick trees</li> <li>n_trees (int) : number of trees (or lines) in file</li> <li>output_file (str) : output file for distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (np.array) : distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/tqdist.html","title":"Tqdist","text":""},{"location":"modules/pear_ebi/calculate_distances/tqdist.html#bash_command","title":"bash_command","text":"<p>source <pre><code>.bash_command(\n   cmd\n)\n</code></pre></p> <p>Executes bash command in subprocess</p> <p>Args</p> <ul> <li>cmd (str) : bash command to be runned in subprocess</li> </ul> <p>Returns</p> <ul> <li>0  : returns 0 if everything's alright</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/tqdist.html#quartet","title":"quartet","text":"<p>source <pre><code>.quartet(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes quartet distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/tqdist.html#triplet","title":"triplet","text":"<p>source <pre><code>.triplet(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes triplet distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/Isomap_e.html","title":"Isomap e","text":""},{"location":"modules/pear_ebi/embeddings/Isomap_e.html#isomap","title":"isomap","text":"<p>source <pre><code>.isomap(\n   distance_matrix, n_components, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Isomap</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : embedding of distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/LLE_e.html","title":"LLE e","text":""},{"location":"modules/pear_ebi/embeddings/LLE_e.html#lle","title":"lle","text":"<p>source <pre><code>.lle(\n   distance_matrix, n_components, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Locally Linear Embedding</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : Embedding of distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/PCoA_e.html","title":"PCoA e","text":""},{"location":"modules/pear_ebi/embeddings/PCoA_e.html#pcoa","title":"pcoa","text":"<p>source <pre><code>.pcoa(\n   distance_matrix, n_components, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Principal Coordinate Analysis</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : principal coordinates(components) of distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/emb_quality.html","title":"Emb quality","text":""},{"location":"modules/pear_ebi/embeddings/emb_quality.html#euclidean_distance","title":"euclidean_distance","text":"<p>source <pre><code>.euclidean_distance(\n   distances\n)\n</code></pre></p> <p>Computes euclidean distances - norm of vectors</p> <p>Args</p> <ul> <li>distances (np.array) : n-dimensional coordinates of points</li> </ul> <p>Returns</p> <ul> <li>euxlidean_distances (np.array) : array with euclidean distances</li> </ul>"},{"location":"modules/pear_ebi/embeddings/emb_quality.html#pear_correlation","title":"pear_correlation","text":"<p>source <pre><code>.pear_correlation(\n   distance_matrix, embedding\n)\n</code></pre></p> <p>Computes pearson correlation between euclidean distances in different dimensionalities</p> <p>Args</p> <ul> <li>distance_matrix (np.array) : n-dimensional distance matrix</li> <li>embedding (np.array) : (m &lt; n)-dimensional embedding</li> </ul> <p>Returns</p> <ul> <li>correlation (float) : pearson correlation</li> </ul>"},{"location":"modules/pear_ebi/embeddings/emb_quality.html#drm","title":"DRM","text":"<p>source <pre><code>.DRM(\n   distance_matrix, embedding, inverse_emb\n)\n</code></pre></p> <p>Return DRM object from https://github.com/zhangys11/pyDRMetrics</p> <p>Args</p> <ul> <li>distance_matrix (np.array) : n-dimensional distance matrix</li> <li>embedding (np.array) : (m &lt; n)-dimensional embedding</li> <li>inverse_emb (np.array) : reverse fit of model on embeddings</li> </ul> <p>Returns</p> <ul> <li>DRM  : DRM object with quality metrics</li> </ul>"},{"location":"modules/pear_ebi/embeddings/tSNE_e.html","title":"tSNE e","text":""},{"location":"modules/pear_ebi/embeddings/tSNE_e.html#tsne","title":"tsne","text":"<p>source <pre><code>.tsne(\n   distance_matrix, n_dimensions, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with t-Stochastic Neighbor Embedding</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_dimensions (int) : number of desired dimensions</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>Distances_embedded_ND (numpy.array) : distances embedded in n_dimensions</li> </ul>"},{"location":"modules/pear_ebi/embeddings/graph/graph.html","title":"Graph","text":""},{"location":"modules/pear_ebi/embeddings/graph/graph.html#plot_embedding","title":"plot_embedding","text":"<p>source <pre><code>.plot_embedding(\n   data, metadata, dimensions, save = False, name_plot = 'Tree_embedding',\n   static = False, plot_meta = 'SET-ID', plot_set = None, select = False,\n   same_scale = False, z_axis = None\n)\n</code></pre></p> <p>Plot embedding of distance matrix - in 2D or 3D</p> <p>Args</p> <ul> <li>data (pandas.DataFrame) : embedding of distance matrix</li> <li>metadata (pandas.DataFrame) : metadata of tree_set or set_collection</li> <li>dimensions (int) : number of dimensions - either 2 or 3</li> <li>save (bool, optional) : save plot in pdf format. Defaults to False.</li> <li>name_plot (str, optional) : name of plot. Defaults to 'Tree_embedding'.</li> <li>static (bool, optional) : if True, returns a less interactive format of plot. Defaults to False.</li> <li>plot_meta (str, optional) : defines the meta-feature used to color the points. Defaults to 'SET-ID'.</li> <li>plot_set (list or str, optional) : sets in set_collection to be plotted. Defaults to None.</li> <li>select (bool, optional) : if True, generates widgets that allow to show or hide uo to 16 set traces. Defaults to False.</li> </ul> <p>Returns</p> <ul> <li>image  : plot with related widgets - interactive or static format</li> </ul>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html","title":"Interactive","text":""},{"location":"modules/pear_ebi/interactive_mode/interactive.html#usage","title":"usage","text":"<p>source <pre><code>.usage()\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#exit_program","title":"exit_program","text":"<p>source <pre><code>.exit_program()\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#calculate_distances","title":"calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#embedding","title":"embedding","text":"<p>source <pre><code>.embedding(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#plotting","title":"plotting","text":"<p>source <pre><code>.plotting(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#add_set","title":"add_set","text":"<p>source <pre><code>.add_set()\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#get_subset","title":"get_subset","text":"<p>source <pre><code>.get_subset(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#interact","title":"interact","text":"<p>source <pre><code>.interact(\n   control\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/subsample/subsample.html","title":"Subsample","text":""},{"location":"modules/pear_ebi/subsample/subsample.html#subsample","title":"subsample","text":"<p>source <pre><code>.subsample(\n   file, n_trees, n_required, subp = True\n)\n</code></pre></p> <p>subsample a set of trees considering their    distribution in the n_trees dimensional space.    It tries to maximize the distance between the    points in the sample considering the pairwise distance    with respect to the furthest points found at a certain step.    If the distance of a sample point P is not greater than    the one between MD1 &amp; MD2, then a random value is    retrieved from a uniform distribution {0,1}. If the    value is greater than 0.5, then the point is kept,    else discarded. This allows to sample also considering    the density of the points.</p> <p>Args</p> <ul> <li>file (str) : name of file containing the set of trees in newick format.</li> <li>n_trees (int) : number of trees in set.</li> <li>n_required (int) : number of trees in subsample.</li> </ul> <p>Returns</p> <ul> <li>points (list) : list of trees subsampled.</li> <li>idxs (list) : list of indexes of the trees subsampled.</li> </ul>"},{"location":"modules/pear_ebi/subsample/subsample_multiprocess.html","title":"Subsample multiprocess","text":""},{"location":"modules/pear_ebi/subsample/subsample_multiprocess.html#subsample","title":"subsample","text":"<p>source <pre><code>.subsample(\n   file, n_trees, n_required, subp = True\n)\n</code></pre></p> <p>subsample a set of trees considering their    distribution in the n_trees dimensional space.    It tries to maximize the distance between the    points in the sample considering the pairwise distance    with respect to the furthest points found at a certain step.    If the distance of a sample point P is not greater than    the one between MD1 &amp; MD2, then a random value is    retrieved from a uniform distribution {0,1}. If the    value is greater than 0.5, then the point is kept,    else discarded. This allows to sample also considering    the density of the points.</p> <p>Args</p> <ul> <li>file (str) : name of file containing the set of trees in newick format.</li> <li>n_trees (int) : number of trees in set.</li> <li>n_required (int) : number of trees in subsample.</li> </ul> <p>Returns</p> <ul> <li>points (list) : list of trees subsampled.</li> <li>idxs (list) : list of indexes of the trees subsampled.</li> </ul>"},{"location":"modules/test/test.html","title":"Test","text":""},{"location":"modules/test/test.html#testpear","title":"TestPEAR","text":"<p>source <pre><code>TestPEAR()\n</code></pre></p> <p>Methods:</p>"},{"location":"modules/test/test.html#setup","title":".setUp","text":"<p>source <pre><code>.setUp()\n</code></pre></p>"},{"location":"modules/test/test.html#test_init","title":".test_init","text":"<p>source <pre><code>.test_init()\n</code></pre></p>"},{"location":"modules/test/test.html#test_calculate_distances","title":".test_calculate_distances","text":"<p>source <pre><code>.test_calculate_distances()\n</code></pre></p>"},{"location":"modules/test/test.html#test_compute_embeddings","title":".test_compute_embeddings","text":"<p>source <pre><code>.test_compute_embeddings()\n</code></pre></p>"},{"location":"modules/test/test.html#test_graph","title":".test_graph","text":"<p>source <pre><code>.test_graph()\n</code></pre></p>"}]}