{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Phylogeny Embedding  &amp;   Approximate Representation"},{"location":"index.html#goldman-group-european-bioinformatics-institute","title":"Goldman Group - European Bioinformatics Institute","text":"<p>PEAR can: 1. Compute the distance matrix given a set of phylogenetic trees; 2. Embed and represent the distance matrix in 2D or 3D.</p> <p>See also the  autogenerated documentation  and  PyPI .</p>"},{"location":"index.html#pear-usage","title":"PEAR usage","text":"<p>Pear is both a python software and library. It can be installed with <code>python -m pip install pear_ebi</code> or downloaded from Github. Pear is currently compatible only with Linux.</p>"},{"location":"index.html#pear-as-a-python-library","title":"PEAR as a python library","text":"<p>Once installed, Pear can be used to upload newick trees in python and represent them in embedded spaces. We recommend to use it on either jupyter notebook or lab, as these tools allow for more interaction with the graphs. On these platforms, the user is allowed to interact with widgets that allows to modify several parameteres of the plots. For specific uses and applications, see the examples.</p>"},{"location":"index.html#pear-as-a-program","title":"PEAR as a program","text":"<p>Run <code>pear_ebi --help</code> to see the complete list of arguments and flags.</p>"},{"location":"index.html#simple-usage","title":"Simple usage","text":"<p><code>pear_ebi examples_tree_sets/beast_trees/beast_run1.trees -m hashrf_RF</code></p> <p>this script calculates the unweighted Robison Foulds distances between the trees in the file \"beast_run1.trees\", which contains 1001 phylogenetic trees.</p> <p>the flag -m indicates the method used to compute the dissimilarity between phylogeneic trees. In this case, HasRF has been used.</p> <p>To embed these distances in a lower-dimensional space, we can use PCoA (MDS) or tSNE:</p> <p><code>pear_ebi examples_tree_sets/beast_trees/beast_run1.trees -m hashrf_RF --pcoa 2</code></p> <p>we therefore embedded the distance matrix in 2 dimensions. Using the flag -quality one can assess the correlation between the distances in the N-dimensional space and in the embedding.</p> <p><code>pear_ebi examples_tree_sets/beast_trees/beast_run1.trees -m hashrf_RF --pcoa 2 --plot</code></p> <p>The flag -plot indicates that PEAR has to plot the embeddings and show them, respectively. If an embedding method is specified the plots are produced anyway. Plotting doesn't require any indication on the number of dimensions as the embeddings are represented in 2 dimensions if the distances are embedded in 2 dimensions, while it plots on 2 and 3 dimensions in any other case.</p> <p>One can specify any number of files containing trees. Moreover, it is possible to specify a single directory using -dir, and possibly a pattern using -pattern, in order to select multiple files.</p>"},{"location":"index.html#tree-set","title":"Tree Set","text":"<p>It's possible to compute the distance matrix and re-use it in subsequent runs of PEAR by specifying the distance matrix file with the flag -d. Additionally, it's possible to define the name of the output file (-o).</p> <p>If any additional metadata is available, this may be specified by indicating a .csv file containing a dataframe of compatible shape.</p>"},{"location":"index.html#config-file","title":"Config file","text":"<p>A standard config toml file can be used for specific emebddings of multiple sets of trees. Instances of toml files are reported in the examples folder.</p> <p>Using the config file allows one to use all the features of PEAR, including additional embedding methods and plot designs. The config file can also be used to specify lists of indexes of interesting trees in the sets, in order to highlight them in the final plots.</p>"},{"location":"index.html#interactive-mode","title":"Interactive mode","text":"<p><code>pear_ebi -i</code> : this script launches the program in the interactive mode. Once the program starts, it is going to guide you through its usage thanks to an intuitive interface.</p>"},{"location":"index.html#turorials-and-examples","title":"Turorials and Examples","text":"<p>Follow this link for a complete set of basic and avanced guides and tutorials to use PEAR on the command line and as a python library.</p>"},{"location":"index.html#licensing","title":"Licensing","text":"<p>This project is released under the terms of the MIT Open Source License. View LICENSE.txt for more information.</p>"},{"location":"modules/gendoc.html","title":"Gendoc","text":""},{"location":"modules/gendoc.html#add_val","title":"add_val","text":"<p>source <pre><code>.add_val(\n   indices, value, data\n)\n</code></pre></p>"},{"location":"modules/gendoc.html#automate_mkdocs_from_docstring","title":"automate_mkdocs_from_docstring","text":"<p>source <pre><code>.automate_mkdocs_from_docstring(\n   mkdocs_dir: Union[str, Path], mkgendocs_f: str, repo_dir: Path,\n   match_string: str\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>list  : list of created markdown files and their relative paths</li> </ul>"},{"location":"modules/gendoc.html#automate_nav_structure","title":"automate_nav_structure","text":"<p>source <pre><code>.automate_nav_structure(\n   mkdocs_dir: Union[str, Path], mkdocs_f: str, repo_dir: Path, match_string: str,\n   structure: dict\n)\n</code></pre></p> <p>Automates the -pages for mkgendocs package by adding all Python functions in a directory to the mkgendocs config.</p> <p>Args</p> <ul> <li>mkdocs_dir (typing.Union[str, pathlib.Path]) : textual directory for the hierarchical directory &amp; navigation in Mkdocs</li> <li>mkgendocs_f (str) : The configurations file for the mkgendocs package</li> <li>repo_dir (pathlib.Path) : textual directory to search for Python functions in</li> <li>match_string (str) : the text to be matches, after which the functions will be added in mkgendocs format</li> </ul> <p>Example</p> <pre><code>&gt;&gt;&gt; automate_mkdocs_from_docstring('scripts', repo_dir=Path.cwd(), match_string='pages:')\n</code></pre> <p>Returns</p> <ul> <li>str  : feedback message</li> </ul>"},{"location":"modules/gendoc.html#fix","title":"fix","text":"<p>source <pre><code>.fix(\n   f\n)\n</code></pre></p> <p>Allows creation of arbitrary length dict item</p> <p>Args</p> <ul> <li>f (type) : Description of parameter <code>f</code>.</li> </ul> <p>Returns</p> <ul> <li>type  : Description of returned object.</li> </ul>"},{"location":"modules/gendoc.html#indent","title":"indent","text":"<p>source <pre><code>.indent(\n   string: str\n)\n</code></pre></p> <p>Count the indentation in whitespace characters.</p> <p>Args</p> <ul> <li>string (str) : text with indents</li> </ul> <p>Returns</p> <ul> <li>int  : Number of whitespace indentations</li> </ul>"},{"location":"modules/pear_ebi/tree_emb_parser.html","title":"Tree emb parser","text":""},{"location":"modules/pear_ebi/tree_emb_parser.html#parser","title":"parser","text":"<p>source <pre><code>.parser()\n</code></pre></p> <p>Generates parser for PEAR program</p> <p>Returns</p> <ul> <li>parser  : PEAR parser</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html","title":"Tree set","text":""},{"location":"modules/pear_ebi/tree_set.html#tree_set","title":"tree_set","text":"<p>source <pre><code>tree_set(\n   file, output_file = None, distance_matrix = None, metadata = None\n)\n</code></pre></p> <p>Class for the analysis of a set of phylogenetic trees</p> <p>Methods:</p>"},{"location":"modules/pear_ebi/tree_set.html#calculate_distances","title":".calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   method\n)\n</code></pre></p> <p>Computes tree_set distance matrix with method of choice</p> <p>Args</p> <ul> <li>method (str) : method/algorithm used to compute distance matrix</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#embed","title":".embed","text":"<p>source <pre><code>.embed(\n   method, dimensions, quality = False, report = False\n)\n</code></pre></p> <p>Compute embedding with n-dimensions and method of choice</p> <p>Args</p> <ul> <li>method (str) : method of choice to embed data</li> <li>dimensions (type) : number of dimensions/components</li> <li>quality (bool, optional) : returns quality report and self.emb_quality. Defaults to False.</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#plot_2d","title":".plot_2D","text":"<p>source <pre><code>.plot_2D(\n   method, save = False, name_plot = None, static = False, plot_meta = 'SET-ID',\n   plot_set = None, select = False, same_scale = False\n)\n</code></pre></p> <p>Plot 2D embedding performed with method of choice</p> <p>Args</p> <ul> <li>method (str) : embedding method</li> <li>save (bool, optional) : save plot HTML. Defaults to False.</li> <li>name_plot (str, optional) : name of plot's file. Defaults to None.</li> <li>static (bool, optional) : return less interactive plot. Defaults to False.</li> <li>plot_meta (str, optional) : meta-variale used to color the points. Defaults to \"SET-ID\".</li> <li>plot_set (list, optional) : list of sets to plot from set_collection. Defaults to None.</li> <li>select (bool, optional) : return set of buttons to show or hide specific traces. Defaults to False.</li> <li>same_scale (bool, optional) : use same color_scale for all traces when scale is continuous. Defaults to False.</li> </ul> <p>Raises</p> <ul> <li>ValueError  : method can only be either pcoa or tsne for now</li> </ul> <p>Returns</p> <ul> <li>plot  : either interactive or not</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#plot_3d","title":".plot_3D","text":"<p>source <pre><code>.plot_3D(\n   method, save = False, name_plot = None, static = False, plot_meta = 'SET-ID',\n   plot_set = None, select = False, same_scale = False, z_axis = None\n)\n</code></pre></p> <p>Plot 3D embedding performed with method of choice</p> <p>Args</p> <ul> <li>method (str) : embedding method</li> <li>save (bool, optional) : save plot HTML. Defaults to False.</li> <li>name_plot (str, optional) : name of plot's file. Defaults to None.</li> <li>static (bool, optional) : return less interactive plot. Defaults to False.</li> <li>plot_meta (str, optional) : meta-variale used to color the points. Defaults to \"SET-ID\".</li> <li>plot_set (list, optional) : list of sets to plot from set_collection. Defaults to None.</li> <li>select (bool, optional) : return set of buttons to show or hide specific traces. Defaults to False.</li> <li>same_scale (bool, optional) : use same color_scale for all traces when scale is continuous. Defaults to False.</li> </ul> <p>Raises</p> <ul> <li>ValueError  : method can only be either pcoa or tsne for now</li> </ul> <p>Returns</p> <ul> <li>plot  : either interactive or not</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#get_subset","title":".get_subset","text":"<p>source <pre><code>.get_subset(\n   n_required, method = 'sequence'\n)\n</code></pre></p> <p>Gets subset of phylogenetic trees</p> <p>Args</p> <ul> <li>n_required (int) : number of points to extract</li> <li>method (str, optional) : method used to extact points ('sequence', 'random', 'syst'). Defaults to \"sequence\".</li> </ul> <p>Returns</p> <ul> <li>plots  : 2D and 3D embedding plots of subset</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#set_collection","title":"set_collection","text":"<p>source <pre><code>set_collection(\n   collection = list(), file = 'Set_collection_', output_file = None,\n   distance_matrix = None, metadata = None\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"modules/pear_ebi/tree_set.html#calculate_distances_1","title":".calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   method\n)\n</code></pre></p> <p>Computes tree_set distance matrix with method of choice</p> <p>Args</p> <ul> <li>method (str) : method/algorithm used to compute distance matrix</li> </ul>"},{"location":"modules/pear_ebi/tree_set.html#concatenate","title":".concatenate","text":"<p>source <pre><code>.concatenate(\n   other\n)\n</code></pre></p> <p>Concatenates two collectionsor collection and tree_set</p> <p>Args</p> <ul> <li>other (tree_set ot set_colletion) : tree_set ot set_colletion</li> </ul> <p>Returns</p> <ul> <li>set_collection  : concatenated set_collection</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/hashrf.html","title":"Hashrf","text":""},{"location":"modules/pear_ebi/calculate_distances/hashrf.html#bash_command","title":"bash_command","text":"<p>source <pre><code>.bash_command(\n   cmd\n)\n</code></pre></p> <p>Executes bash command in subprocess</p> <p>Args</p> <ul> <li>cmd (str) : bash command to be runned in subprocess</li> </ul> <p>Returns</p> <ul> <li>0  : returns 0 if everything's alright</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/hashrf.html#hashrf","title":"hashrf","text":"<p>source <pre><code>.hashrf(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes unweighted Robison Foulds distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/hashrf.html#hashrf_weighted","title":"hashrf_weighted","text":"<p>source <pre><code>.hashrf_weighted(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes weighted Robison Foulds distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html","title":"maple RF","text":""},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#tree","title":"Tree","text":"<p>source <pre><code>Tree(\n   name = '', children = None, dist = 3.3e-05\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#add_child","title":".add_child","text":"<p>source <pre><code>.add_child(\n   node\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#readnewick","title":"readNewick","text":"<p>source <pre><code>.readNewick(\n   tree_list, defaultBLen = 3.3e-05, normalizeInputBLen = 1.0\n)\n</code></pre></p> <p>From a list of strings defining phylogenetic trees in newick format, returns a list of Tree instances containing the biartitions of the tree in a modularized form, suitable for comparisons with other trees.</p> <p>Args</p> <ul> <li>tree_list (list) : list of trees in newick format.</li> <li>defaultBLen (float, optional) : default branch length. Defaults to 0.000033.</li> <li>normalizeInputBLen (float, optional) : value used to normalize branch lenghts. Defaults to 1.0.</li> </ul> <p>Returns</p> <ul> <li>trees  : list of Tree instances</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#preparetreecomparison","title":"prepareTreeComparison","text":"<p>source <pre><code>.prepareTreeComparison(\n   t1, rooted = False, minimumBLen = 6e-06\n)\n</code></pre></p> <p>Prepares newick tree for comparison</p> <p>Args</p> <ul> <li>t1 (str) : input tree</li> <li>rooted (bool, optional) : set to True if t1 is rooted, default ro False</li> <li>minimumBLen (float, optional) : minimum value for branch length, default to 6E-6</li> </ul> <p>Returns</p> <ul> <li>metrics (tuple of values) (leafNameDict, nodeTable, leafCount, numBranches, leafDistDict, branchLengthDict, sumBranchLengths,) : tree metrics among which the RFL.</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#robinsonfouldswithday1985","title":"RobinsonFouldsWithDay1985","text":"<p>source <pre><code>.RobinsonFouldsWithDay1985(\n   t2, t1, rooted = False, minimumBLen = 6e-06\n)\n</code></pre></p> <p>Computes Robison Foulds distances using Day's algorithm</p> <p>Args</p> <ul> <li>t2 (string) : newick tree to be compared to t1</li> <li>t1 (tuple) : t1 after preprocessing using prepareTreeComparison()</li> <li>rooted (bool, optional) : True if t2 is rooted. Defaults to False.</li> <li>minimumBLen (float, optional) : minimum branch length. Defaults to 0.000006.</li> </ul> <p>Returns</p> <ul> <li>parameters (tuple) (numDiffs, float(numDiffs) / (normalization), leafCount, foundBranches, missedBranches, (numBranches - foundBranches), RFL) : results of comparison, among which the RF distance (numDiffs).</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/maple_RF.html#calculate_distance_matrix","title":"calculate_distance_matrix","text":"<p>source <pre><code>.calculate_distance_matrix(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes the whole pipeline that calculates the pairwise distances in a collection of trees</p> <p>Args</p> <ul> <li>file (str) : file containing the newick trees</li> <li>n_trees (int) : number of trees (or lines) in file</li> <li>output_file (str) : output file for distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (np.array) : distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/tqdist.html","title":"Tqdist","text":""},{"location":"modules/pear_ebi/calculate_distances/tqdist.html#bash_command","title":"bash_command","text":"<p>source <pre><code>.bash_command(\n   cmd\n)\n</code></pre></p> <p>Executes bash command in subprocess</p> <p>Args</p> <ul> <li>cmd (str) : bash command to be runned in subprocess</li> </ul> <p>Returns</p> <ul> <li>0  : returns 0 if everything's alright</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/tqdist.html#quartet","title":"quartet","text":"<p>source <pre><code>.quartet(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes quartet distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/calculate_distances/tqdist.html#triplet","title":"triplet","text":"<p>source <pre><code>.triplet(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>Computes triplet distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/Isomap_e.html","title":"Isomap e","text":""},{"location":"modules/pear_ebi/embeddings/Isomap_e.html#isomap","title":"isomap","text":"<p>source <pre><code>.isomap(\n   distance_matrix, n_components, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Isomap</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : embedding of distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/LLE_e.html","title":"LLE e","text":""},{"location":"modules/pear_ebi/embeddings/LLE_e.html#lle","title":"lle","text":"<p>source <pre><code>.lle(\n   distance_matrix, n_components, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Locally Linear Embedding</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : Embedding of distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/PCoA_e.html","title":"PCoA e","text":""},{"location":"modules/pear_ebi/embeddings/PCoA_e.html#pcoa","title":"pcoa","text":"<p>source <pre><code>.pcoa(\n   distance_matrix, n_components, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Principal Coordinate Analysis</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : principal coordinates(components) of distance matrix</li> </ul>"},{"location":"modules/pear_ebi/embeddings/emb_quality.html","title":"Emb quality","text":""},{"location":"modules/pear_ebi/embeddings/emb_quality.html#euclidean_distance","title":"euclidean_distance","text":"<p>source <pre><code>.euclidean_distance(\n   distances\n)\n</code></pre></p> <p>Computes euclidean distances - norm of vectors</p> <p>Args</p> <ul> <li>distances (np.array) : n-dimensional coordinates of points</li> </ul> <p>Returns</p> <ul> <li>euxlidean_distances (np.array) : array with euclidean distances</li> </ul>"},{"location":"modules/pear_ebi/embeddings/emb_quality.html#pear_correlation","title":"pear_correlation","text":"<p>source <pre><code>.pear_correlation(\n   distance_matrix, embedding\n)\n</code></pre></p> <p>Computes pearson correlation between euclidean distances in different dimensionalities</p> <p>Args</p> <ul> <li>distance_matrix (np.array) : n-dimensional distance matrix</li> <li>embedding (np.array) : (m &lt; n)-dimensional embedding</li> </ul> <p>Returns</p> <ul> <li>correlation (float) : pearson correlation</li> </ul>"},{"location":"modules/pear_ebi/embeddings/emb_quality.html#drm","title":"DRM","text":"<p>source <pre><code>.DRM(\n   distance_matrix, embedding, inverse_emb\n)\n</code></pre></p> <p>Return DRM object from https://github.com/zhangys11/pyDRMetrics</p> <p>Args</p> <ul> <li>distance_matrix (np.array) : n-dimensional distance matrix</li> <li>embedding (np.array) : (m &lt; n)-dimensional embedding</li> <li>inverse_emb (np.array) : reverse fit of model on embeddings</li> </ul> <p>Returns</p> <ul> <li>DRM  : DRM object with quality metrics</li> </ul>"},{"location":"modules/pear_ebi/embeddings/tSNE_e.html","title":"tSNE e","text":""},{"location":"modules/pear_ebi/embeddings/tSNE_e.html#tsne","title":"tsne","text":"<p>source <pre><code>.tsne(\n   distance_matrix, n_dimensions, metadata = None, quality = False, report = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with t-Stochastic Neighbor Embedding</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_dimensions (int) : number of desired dimensions</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>Distances_embedded_ND (numpy.array) : distances embedded in n_dimensions</li> </ul>"},{"location":"modules/pear_ebi/embeddings/graph/graph.html","title":"Graph","text":""},{"location":"modules/pear_ebi/embeddings/graph/graph.html#plot_embedding","title":"plot_embedding","text":"<p>source <pre><code>.plot_embedding(\n   data, metadata, dimensions, save = False, name_plot = 'Tree_embedding',\n   static = False, plot_meta = 'SET-ID', plot_set = None, select = False,\n   same_scale = False, z_axis = None\n)\n</code></pre></p> <p>Plot embedding of distance matrix - in 2D or 3D</p> <p>Args</p> <ul> <li>data (pandas.DataFrame) : embedding of distance matrix</li> <li>metadata (pandas.DataFrame) : metadata of tree_set or set_collection</li> <li>dimensions (int) : number of dimensions - either 2 or 3</li> <li>save (bool, optional) : save plot in pdf format. Defaults to False.</li> <li>name_plot (str, optional) : name of plot. Defaults to 'Tree_embedding'.</li> <li>static (bool, optional) : if True, returns a less interactive format of plot. Defaults to False.</li> <li>plot_meta (str, optional) : defines the meta-feature used to color the points. Defaults to 'SET-ID'.</li> <li>plot_set (list or str, optional) : sets in set_collection to be plotted. Defaults to None.</li> <li>select (bool, optional) : if True, generates widgets that allow to show or hide uo to 16 set traces. Defaults to False.</li> </ul> <p>Returns</p> <ul> <li>image  : plot with related widgets - interactive or static format</li> </ul>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html","title":"Interactive","text":""},{"location":"modules/pear_ebi/interactive_mode/interactive.html#usage","title":"usage","text":"<p>source <pre><code>.usage()\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#exit_program","title":"exit_program","text":"<p>source <pre><code>.exit_program()\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#calculate_distances","title":"calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#embedding","title":"embedding","text":"<p>source <pre><code>.embedding(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#plotting","title":"plotting","text":"<p>source <pre><code>.plotting(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#add_set","title":"add_set","text":"<p>source <pre><code>.add_set()\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#get_subset","title":"get_subset","text":"<p>source <pre><code>.get_subset(\n   SET\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/interactive_mode/interactive.html#interact","title":"interact","text":"<p>source <pre><code>.interact(\n   control\n)\n</code></pre></p>"},{"location":"modules/pear_ebi/subsample/subsample.html","title":"Subsample","text":""},{"location":"modules/pear_ebi/subsample/subsample.html#subsample","title":"subsample","text":"<p>source <pre><code>.subsample(\n   file, n_trees, n_required, subp = True\n)\n</code></pre></p> <p>subsample a set of trees considering their    distribution in the n_trees dimensional space.    It tries to maximize the distance between the    points in the sample considering the pairwise distance    with respect to the furthest points found at a certain step.    If the distance of a sample point P is not greater than    the one between MD1 &amp; MD2, then a random value is    retrieved from a uniform distribution {0,1}. If the    value is greater than 0.5, then the point is kept,    else discarded. This allows to sample also considering    the density of the points.</p> <p>Args</p> <ul> <li>file (str) : name of file containing the set of trees in newick format.</li> <li>n_trees (int) : number of trees in set.</li> <li>n_required (int) : number of trees in subsample.</li> </ul> <p>Returns</p> <ul> <li>points (list) : list of trees subsampled.</li> <li>idxs (list) : list of indexes of the trees subsampled.</li> </ul>"},{"location":"modules/pear_ebi/subsample/subsample_multiprocess.html","title":"Subsample multiprocess","text":""},{"location":"modules/pear_ebi/subsample/subsample_multiprocess.html#subsample","title":"subsample","text":"<p>source <pre><code>.subsample(\n   file, n_trees, n_required, subp = True\n)\n</code></pre></p> <p>subsample a set of trees considering their    distribution in the n_trees dimensional space.    It tries to maximize the distance between the    points in the sample considering the pairwise distance    with respect to the furthest points found at a certain step.    If the distance of a sample point P is not greater than    the one between MD1 &amp; MD2, then a random value is    retrieved from a uniform distribution {0,1}. If the    value is greater than 0.5, then the point is kept,    else discarded. This allows to sample also considering    the density of the points.</p> <p>Args</p> <ul> <li>file (str) : name of file containing the set of trees in newick format.</li> <li>n_trees (int) : number of trees in set.</li> <li>n_required (int) : number of trees in subsample.</li> </ul> <p>Returns</p> <ul> <li>points (list) : list of trees subsampled.</li> <li>idxs (list) : list of indexes of the trees subsampled.</li> </ul>"},{"location":"modules/test/test.html","title":"Test","text":""},{"location":"modules/test/test.html#testpear","title":"TestPEAR","text":"<p>source <pre><code>TestPEAR()\n</code></pre></p> <p>Methods:</p>"},{"location":"modules/test/test.html#setup","title":".setUp","text":"<p>source <pre><code>.setUp()\n</code></pre></p>"},{"location":"modules/test/test.html#test_init","title":".test_init","text":"<p>source <pre><code>.test_init()\n</code></pre></p>"},{"location":"modules/test/test.html#test_calculate_distances","title":".test_calculate_distances","text":"<p>source <pre><code>.test_calculate_distances()\n</code></pre></p>"},{"location":"modules/test/test.html#test_compute_embeddings","title":".test_compute_embeddings","text":"<p>source <pre><code>.test_compute_embeddings()\n</code></pre></p>"},{"location":"modules/test/test.html#test_graph","title":".test_graph","text":"<p>source <pre><code>.test_graph()\n</code></pre></p>"},{"location":"tutorials/1How_to_use_pear_ebi.html","title":"1. How to use Pear","text":"<p>This tutorial goes through the basic features of pear_ebi and how to use them</p>"},{"location":"tutorials/1How_to_use_pear_ebi.html#setup","title":"Setup","text":"<p>First of all, check that you have a python version that is supported (python 3.7, 3.8, 3.9). We strongly encourage the creation of a dedicated virtual environment in order to avoid potential conflicts with other libraries due to the mismatch of dependencies' versions. We also support the use of mamba as a more efficient version of conda.</p> <p>In your terminal: Download and install mamba:  See documentation Create new environment with one of the supported versions of python: <code>mamba create -n pear_env python=3.9</code> Activate environment: <code>mamba activate pear_ev</code> Install pear: <code>python -m pip install pear_ebi</code></p> <p>Alternatively: Install virtualenv: <code>pip install virtualenv</code> Create new environment with one of the supported versions of python: <code>python3.9 -m venv pear_env</code> Activate environment: <code>source pear_env/bin/activate</code> Install pear: <code>python -m pip install pear_ebi</code></p>"},{"location":"tutorials/1How_to_use_pear_ebi.html#optional","title":"Optional","text":"<p>If you're planning on performing more advanced analyses, such as the ones described in the \"Advanced Examples\", you should install the extended requirements: <code>python -m pip intall -r requirements.txt</code> and also install the new jupyter kernel: <code>python -m ipykernel install --user --name=pear_ebi</code>"},{"location":"tutorials/1How_to_use_pear_ebi.html#basic-use","title":"Basic Use","text":"<p>After following the steps above to set up pear_ebi, you should be ready to use all the features of pear_ebi!  This notebook is a good guide to learn how to use it and to check that your installation is succesfull. If you should have any problem, please contact us by filing an issue on github. To start with, simply check your installation by running:</p> <pre><code>!pear_ebi\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[31mNo files specified\u001b[0m\u001b[37m \u001b[0m\u001b[1;37m(\u001b[0m\u001b[37msee --help for instructions\u001b[0m\u001b[1;37m)\u001b[0m\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>Pear is complaining because no file was given... since it looks like you don't know how to use it, it kindly suggests to seek help using the <code>--help</code> (or simply <code>-h</code>) flag. Good idea!</p> <pre><code>!pear_ebi -h\n</code></pre> <pre><code>usage: PEAR [-h] [-o output] [--interactive] [-d distance_matrix]\n            [--meta metadata] [-m METHOD] [--pcoa PCOA] [--tsne TSNE] [--plot]\n            [--config CONFIG] [--quality] [--dir DIR] [--pattern PATTERN]\n            [input ...]\n\nPEAR-EBI v0.1.85 | Phylogeny Embedding and Approximate Representation\nCalculates Robison-Foulds distances between large set of trees\n\npositional arguments:\n  input                 input file : tree set in newic format\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o output             output file : storage of distance matrix\n  --interactive, -i     run the program in interactive mode - only the input\n                        file, distance matrix, output file, and metadata\n                        arguments will be considered\n  -d distance_matrix, --dM distance_matrix\n                        distance matrix : specify file containing a\n                        precomputed distance matrix\n  --meta metadata       metadata : csv file with metadata for each tree\n  -m METHOD, --method METHOD\n                        calculates tree distances using specified method\n                        (hashrf_RF, hashrf_wRF, smart_RF, tqdist_quartet,\n                        tqdist_triplet)\n  --pcoa PCOA           embedding using PCoA: select number of components\n                        (int) to be calculated\n  --tsne TSNE           embedding using t-SNE: select number of components\n                        (int) to be calculated\n  --plot, -p            plot embedding in 2 or 3 dimensions\n  --config CONFIG, -c CONFIG\n                        toml config file\n  --quality, -q         asess quality of embedding\n  --dir DIR             directory with files\n  --pattern PATTERN     pattern of files in directory\n\nAuthor: Andrea Rubbi - Goldman Group | European Bioinformatics Institute\n</code></pre> <p>Essentially, pear_ebi does the following:<ul> <li>Reads phylogenetic trees in newick format from one or multiple files;     <li>Computes the distances between the trees with one of the available metrics (refer to <code>--help</code> to see them and to the manuscript for their specific functions);     <li>Embeds the distances in a lower dimensional space. Basic usage allows using either PCoA or tSNE;     <li>Plots the resulting embeddings.    Why should you use pear_ebi? Because it's simple, fast, and produces nice graphs!"},{"location":"tutorials/1How_to_use_pear_ebi.html#load-trees","title":"Load trees","text":"<p>Pear has two kind of structures for your trees:<ol> <li>tree_set;<li>set_collection.  You define a tree_set with a set of trees coming from a single file, whereas a set_collection is composed of trees coming from multiple files, divided into groups depending on the file of origin. In practice, computationally and conceptually, a set_collection is a set of multiple tree_set. We'll make it clear exploring how we can load trees on pear with a few examples. <pre><code># load single set of trees into a tree_set #\n!pear_ebi beast_trees/beast_long.trees\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m1001\u001b[0m trees;\n File: beast_trees/beast_long.trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># load two set of trees into a set_collection #\n!pear_ebi beast_trees/beast_run1.trees beast_trees/beast_run2.trees\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m2002\u001b[0m trees;            \n File: Set_collection_\u001b[93m1bfec55f-592e-43a6-bf2b-4000219b3092\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>Although you may be perplexed about the actual practical difference between these structures, we suggest you keep these questions for the next chapters and bear with us to explore some more funky ways of loading trees onto pear. In fact, you can avoid boring repetitions of the path of your files and simply indicate the directory! </p> <pre><code># load files from directory #\n!pear_ebi --dir beast_trees\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m9009\u001b[0m trees;            \n File: Set_collection_\u001b[93m696e3bb7-7deb-46e1-97c8-3bcce630cddd\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run7; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_long; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run5; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run6; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run3; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run8; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run4; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>Whoa! Too many... thankfully we can indicate a pattern to look for</p> <pre><code># load files from directory using pattern#\n!pear_ebi --dir beast_trees --pattern \"*run*\"\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m8008\u001b[0m trees;            \n File: Set_collection_\u001b[93m9781a60f-d6d7-4ffb-97c3-36d7aed9af4b\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run7; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run5; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run6; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run3; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run8; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run4; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>If you are a regex wizard you can probably select any set of similarly-named files in this way. Me? I generally ask GPT to write the magic formula. NB: you can also use a combination of <code>--dir</code>, <code>--pattern</code>, and normal file definition if one or more files come from other directories. </p> <pre><code>!pear_ebi beast_trees/beast_long.trees --dir beast_trees --pattern \"*run[1,2]*\" \n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m3003\u001b[0m trees;            \n File: Set_collection_\u001b[93m21d56458-1d6b-4dab-9842-f8a65287e845\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_long; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre>"},{"location":"tutorials/1How_to_use_pear_ebi.html#compute-distances","title":"Compute Distances","text":"<p>You can compute the distance matrix using different methods. Each method has a specific purpose, which is outlined in the associated paper. However, in general, the Robison Foulds distance metric is an admittedly good choice. Additionally, pear_ebi computes this metric using the hashrf algorithm, which is the fastest way of computing such metric to date. You can indicate any method available using the <code>-m</code>, or <code>--method</code>, flag. When a metric/method is indicated, pear will use it to compute the distance matrix even if a distance matrix is given, and it will overscribe any previous matrix saved at a file with the same standard format (realistically, this happens only if the matrix was produced using pear during an interactive or advanced session - see the interactive sessions chapter).</p> <pre><code># compute Robison Foulds distances using hashrf #\n!pear_ebi beast_trees/beast_run1.trees -m hashrf_RF\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m1001\u001b[0m trees;\n File: beast_trees/beast_run1.trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2819\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># compute Robison Foulds distances using hashrf #\n!pear_ebi --dir beast_trees --pattern \"*run[12]*\" --method hashrf_RF\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m2002\u001b[0m trees;            \n File: Set_collection_\u001b[93mc9cf5472-d392-4825-b88f-e9feffdb331a\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\u001b[2K\u001b[32m\u2819\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># compute quartet distances #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m tqdist_quartet\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2834\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mtqdist_quartet | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># compute modified RF distances #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m smart_RF\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2819\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34msmart_RF | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>If you run the exaples above you will notice the difference between the time efficiency of hashrf and any other algorithm. Please note the astonishing performance of that algorithm, especially considering the sensible difference in the number of trees analyzed!</p> <p>Given that one may want to analyze the distance matrix in multiple ways,  possibly desiring to skip the hefty distance-computation step, we introduced the  convenient <code>-d</code> flag that allows specifying a previosuly computed distance matrix. Please note that the order of the trees in the distance matrix is preserved and thus one must be consistent with the input specification when reusing a distance matrix. Should you disregard this suggestion, we suggest you also disregard your downstream analyses  (and perhaps everything else as well).</p> <pre><code>!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m hashrf_RF -o precomputed_distance_matrix\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2834\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># reusing distances #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -d precomputed_distance_matrix\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>Please note the difference in the input \"Distance matrix\" status.</p>"},{"location":"tutorials/1How_to_use_pear_ebi.html#embed-distances","title":"Embed distances","text":"<p>Here we show the easy way of embedding the distances and produce nice plots! First of all, one may choose any number of dimensions \\(M \\leq N\\); where \\(N\\) is the number of trees and \\(M\\) the chosen dimensionality of the embedded space. Note that, should \\(M\\) be \\(\\lt 3\\), pear will produce only one 2D plot. Whereas, should \\(M\\) be \\(\\geq 3\\) pear will produce a 2D and a 3D plot. Please note that we are currently unable to produce human-friendly representations for \\(\\gt 3\\)D data... In any case, whichever dimension \\(M\\) may be chosen, an \\(M\\)-dimensional embedding shall be produced and then saved on the machine.</p> <pre><code># compute triplet distances, embed in 2D using pcoa #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m tqdist_triplet --pcoa 2\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2839\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mtqdist_triplet | Done!\u001b[0m\n\u001b[?25l\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># compute RF distances, embed in 5D using tsne #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m hashrf_RF --tsne 5\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2826\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[2K\u001b[32m\u2838\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mtsne | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>Use the <code>--plot</code> flag to show the plots at the end. Note that, when an embedding method is specified, the plots are produced regardless of whether the <code>--plot</code> flag is present or not.  </p> <pre><code># compute RF distances, embed in 5D using tsne #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m hashrf_RF --tsne 5 --plot\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2834\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[2K\u001b[32m\u2838\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mtsne | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>NB: this is something you are expected to run in a terminal, this is why the graph doesn't show up here.</p> <p>The <code>--quality</code>, or <code>-q</code>, flag indicates to pear to provide some quality metrics for the embedding generated.  The toolset of quality-measures provided by pear may be expanded upon request in the future.</p> <pre><code># compute RF distances, embed in 5D using tsne, computing quality #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m hashrf_RF --tsne 5 --quality\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u283c\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[2K\u001b[32m\u283c\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mtsne | Done!\u001b[0m\nWith \u001b[1;36m5\u001b[0m components/dimensions, the estimated correlation with the \u001b[1;36m32\u001b[0m-dimensional \ncoordinates is \u001b[1;36m-0.03\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># compute RF distances, embed in 2D using pcoa, computing quality #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m hashrf_RF --pcoa 2 --quality\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u283c\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[?25l\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\nWith \u001b[1;36m2\u001b[0m components/dimensions, the explained variance is \u001b[1;36m96.56\u001b[0m,\n with an estimated correlation \u001b[1;36m1.00\u001b[0m with the \u001b[1;36m32\u001b[0m-dimensional coordinates\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code># compute RF distances, embed in 10D using pcoa, computing quality #\n!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -m hashrf_RF --pcoa 10 --quality\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2826\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[?25l\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\nWith \u001b[1;36m10\u001b[0m components/dimensions, the explained variance is \u001b[1;36m99.98\u001b[0m,\n with an estimated correlation \u001b[1;36m1.00\u001b[0m with the \u001b[1;36m32\u001b[0m-dimensional coordinates\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <p>Pro tip: since in order to compute an embedded space we need the distance matrix first, pear will automatically compute the distances with <code>hashrf_RF</code> when no method is indicated (and no precomputed distance matrix is specified) </p> <pre><code>!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees --pcoa 2\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[2K\u001b[32m\u2826\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[?25l\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre>"},{"location":"tutorials/1How_to_use_pear_ebi.html#tree_set-vs-set_collection","title":"tree_set vs set_collection","text":"<p>Pear has two kind of structures for your trees:<ol> <li>tree_set;<li>set_collection.  tree_set allows for analyzing a single set of trees. set_collection allows for analyzing multiple set of trees and the divergences between them. In our interactive plots, set_collection generates different sets of points that are colored according to the file of origin. This could be useful, for instance, if one performs multiple runs of a phylogenetic-tree estimating algorithm and wants to assess the robustness/consistency of that method. The distances computation is overall the same as a square distance matrix is generated, encompassing the whole collection of trees."},{"location":"tutorials/1How_to_use_pear_ebi.html#interactive-sessions","title":"Interactive Sessions","text":"<p>All the above, but staying in the loop! You can add set of trees iteratively and compute distances/embeddings as many times as you want to. </p> <pre><code>!pear_ebi -i\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mSpecify file with tree set\u001b[0m\n\nFile: ^C\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre> <pre><code>!pear_ebi MAPLE_res/IQtreeStartingTree_slower_Trees -i \n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Tree set containing \u001b[1;36m32\u001b[0m trees;\n File: MAPLE_res/IQtreeStartingTree_slower_Trees;\n Distance matrix: not computed.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[1;32mPEAR | Interactive Mode\u001b[0m\n\u001b[32m\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u28df\u2809\u287f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u001b[0m\u001b[1;37m -- Controls --\u001b[0m\n\u001b[32m\u28ff\u28ff\u28ff\u28ff\u287f\u28ff\u2889\u28b3\u2834\u28de\u2809\u2877\u28a5\u284f\u2859\u287f\u28bf\u28ff\u28ff\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;37m --&gt; see status\u001b[0m\n\u001b[32m\u28ff\u28ff\u284b\u28bb\u2864\u28fc\u2809\u28af\u2846\u28de\u2819\u28e7\u28e2\u280f\u282a\u28e3\u28a6\u285b\u2839\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;37m --&gt; calculate distances\u001b[0m\n\u001b[32m\u28ff\u28ff\u2813\u28bb\u28c4\u28fc\u280b\u28b7\u2860\u287d\u281a\u28c9\u28e4\u285e\u289a\u28a6\u28a2\u281f\u2839\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m3\u001b[0m\u001b[1;37m --&gt; embed distances\u001b[0m\n\u001b[32m\u28ff\u28ff\u2893\u28bb\u2844\u287c\u2817\u2883\u28c2\u2852\u283b\u28e7\u28c2\u287f\u281a\u28e8\u28a8\u2853\u283b\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m4\u001b[0m\u001b[1;37m --&gt; plot embeddings\u001b[0m\n\u001b[32m\u28ff\u28ff\u2817\u288e\u2884\u2802\u283e\u28ef\u28c2\u287d\u2893\u2886\u2894\u2810\u283f\u28c7\u2885\u2857\u283b\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m5\u001b[0m\u001b[1;37m --&gt; add set to collection\u001b[0m\n\u001b[32m\u28ff\u28ff\u2816\u28af\u2861\u28f9\u2817\u28e4\u28c9\u281b\u2836\u28cf\u288c\u287f\u2832\u284c\u288c\u289e\u283c\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m6\u001b[0m\u001b[1;37m --&gt; get subset\u001b[0m\n\u001b[32m\u28ff\u28ff\u28ee\u28fe\u2849\u28f9\u2826\u28de\u2849\u287d\u2836\u284c\u280c\u286e\u2832\u28cf\u28a9\u28f7\u28fc\u28ff\u001b[0m\n\u001b[32m\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e4\u28de\u2889\u28f3\u2825\u28cf\u280d\u28e7\u28f5\u28ff\u28ff\u28ff\u28ff\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m7\u001b[0m\u001b[1;37m --&gt; exit\u001b[0m\n\u001b[32m\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28e4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u001b[0m\u001b[1;37m \u001b[0m\u001b[1;37m8\u001b[0m\u001b[1;37m --&gt; see list of controls\u001b[0m\nCommand:\n</code></pre>"},{"location":"tutorials/1How_to_use_pear_ebi.html#there-is-more","title":"There is more...","text":"<p>the flags <code>--meta</code> and <code>--config</code> introduce another layer of flexibility into our analyses.   Please, refer to the \"Advanced Examples\" folder to get a gist of the full potential of pear!"},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html","title":"2. Advanced uses of Pear","text":"<p>Here we introduce some more elaborated ways we can use pear to perform in-depth analyses and produce effective representations of the embedded distance matrices.</p>"},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html#peartoml","title":"pear.toml","text":"<p>Pear will automatically look for a <code>pear.toml</code> file in the working directory, alternatively, a <code>.toml</code> file can be specified using the <code>--config</code> flag. A <code>.toml</code> file is just a convenient way of specifying many parameters. Doing so in an auxiliary file remove excessive clutter in the use of pear and promotes a more standardized way of performing a series of analyses.  We will guide you through the use of this additional tool.</p> <pre><code>!cat template_pear.toml\n</code></pre> <p>Here you can see the <code>pear.toml</code> example stored in the same directory of this notebook. It is a perfect template for your future analyses! Let's go thorugh all its parts:<ul> <li> <code>[trees]</code> contains single file specifications. Each line associated with this key should direct pear to a file containing trees in Newick format. The nomenclature is \"file\\(n\\)=filename\", where \\(n\\) is just the index of the file, whereas filename is the path to the file itself.     <li> <code>[dir]</code> contains directory and pattern specifications. Each directory should contain only tree-containing files, and should be indicated with a . Alternatively, a <code>pattern</code> can be indicated to narrow the research of the files.     <li> <code>[collection]</code> stores details related to the <code>tree_set</code> or <code>set_collection</code>:<ul> <li> <code>output_file</code> specifies an alternative name and path for the distance matrix file;         <li> <code>distance_matrix</code> indicates the path of a precomputed distance matrix;         <li> <code>metadata</code> indicates a <code>.csv</code> file containing metadata compatible with the collection. That means that the number of rows in the file should be equal to the number of trees in the collection. The information stored in metadata can be of any type (discrete or continuous) and can subsequently used in the representation of your data in the 3D embedding instead of the 3\\(^{rd}\\) dimension, or to color the points (trees).  <li> <code>[highlight]</code> allows for specifying specific trees in the set/collection which are going to highlighted in the final plots. The way one specifies this is by giving a list of indexes indicating which trees to be highlighted for a given set (either if that is part of a collection or not). You specify a list for a set by writing \"file\\(n\\)\"if the file has been indexed as such in the <code>[files]</code> argument. Otherwise by using the name of the file (without extension: filename.trees is just filename) if the file has been specified through <code>[dir]</code> selection.  <li> <code>[distance]</code> specifies the <code>method</code> used to compute the distance matrix. It can be chosen among <code>hashrf_RF</code>, <code>hashrf_wRF</code>, <code>smart_RF</code>, <code>tqdist_quartet</code>, <code>tqdist_triplet</code>.     <li> <code>[embedding]</code> specifies the <code>method</code> used to compute the embedding of the distance matrix, the <code>dimensions</code> of the embedding, and whether to display the <code>quality</code> or not. Methods are <code>pcoa</code>, <code>tsne</code>, <code>isomap</code>, <code>lle</code>.     <li> <code>[plot]</code> defines some aspects of the plots produced by pear:<ul> <li><code>name_plot</code> specifies the name of the plot produced;         <li><code>plot_meta</code> indicates which feature to use to color the points in the graph, default value is <code>SET-ID</code> which simply colors by <code>tree_set</code>. A <code>STEP</code> meta-variable is present and indicates the index of a tree in a <code>tree_set</code>, it can be used to color trees when the ordering is important. Other meta-variables can be specified through the <code>[metadata]</code> argument.         <li> <code>z_axis</code>, similarly to <code>plot_meta</code>, indicates an alternative meta-variable to be used in the plots. The selected meta-variable replaces the 3\\(^{rd}\\) dimension in the 3D graphs.         <li><code>select</code> indicates whether the graph should have a set of interactive buttons to display/hide specific <code>tree_set</code>s or not.          <li><code>same_scale</code> indicates whether the same colorscale should be applied to every <code>tree_set</code> or not.         <li><code>show</code> specifies whether the plot should be shown or not.  Note that all these arguments are optional, and many of them can be specified otherwise using the normal functionalities of pear. In fact, should any of these arguments be specified using the <code>.toml</code> structure and the flags in pear, the arguments will be overscribed by the ones indicated on the command line. On an additional note related to this, the flag <code>--meta</code> allows to specify on the command line a metadata file, replicating the behaviour of the <code>metadata</code> argument in <code>[collection]</code>."},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html#examples","title":"Examples","text":""},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html#example-1","title":"Example 1","text":"<p>We use pear to analyze 3 runs of a MCMC algorithm, called Beast, used to estimate a phylogenetic tree structure. We upload 2 files using the <code>[trees]</code> argument and 1 by specifying the <code>[dir]</code> and a <code>pattern</code>. We compute the Robinson Foulds distances using hashrf. We embed the distances in a 3-dimensional space using PCoA, and we plot the results colouring by STEP and highlighting some specific trees for each set. We also display some buttons to hide/show the sets in the plots, we use different colorscales (the default behaviour), and we show the results.</p> <pre><code>!cat example_1.toml\n</code></pre> <pre><code>!pear_ebi --config example_1.toml\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[37mLooking into directory \u001b[0m\u001b[35m..\u001b[0m\u001b[35m/beast_trees/\u001b[0m\u001b[35m \u001b[0m\u001b[37m- pattern: \u001b[0m\u001b[35m*run2*\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m3003\u001b[0m trees;            \n File: Set_collection_\u001b[93m72c842e8-e1ac-4a90-8fbc-535c4b10ef92\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_long; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\u001b[2K\u001b[32m\u2838\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[2K\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre>"},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html#example-1-continued","title":"Example 1 Continued","text":"<p>We now show that we can easily modify a single parameter without touching the <code>.toml</code> file by simply overriding it on the command line.  As an example, we change the embedding method to tSNE.</p> <pre><code>!pear_ebi --config example_1.toml --tsne 3\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[37mLooking into directory \u001b[0m\u001b[35m..\u001b[0m\u001b[35m/beast_trees/\u001b[0m\u001b[35m \u001b[0m\u001b[37m- pattern: \u001b[0m\u001b[35m*run2*\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m3003\u001b[0m trees;            \n File: Set_collection_\u001b[93m9a55b5c8-53b6-40c3-b4c7-55df883b3258\u001b[0m;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run1; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_long; Containing \u001b[1;36m1001\u001b[0m trees. \nbeast_run2; Containing \u001b[1;36m1001\u001b[0m trees.\n\n\u001b[2K\u001b[32m\u283c\u001b[0m \u001b[1;32mCalculating distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mhashrf_RF | Done!\u001b[0m\n\u001b[2K\u001b[32m\u2839\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mtsne | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre>"},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html#example-2","title":"Example 2","text":"<p>We use pear to compare 5 different algorithms used to estimate a phylogenetic tree structure with the real structure (we know it as we use simulated data). We upload 6 files using the <code>[trees]</code> argument. We compute the Robinson Foulds distances using hashrf. We embed the distances in a 3-dimensional space using PCoA, and we plot the results colouring by the Likelihood values obtained during the runs. We highlight the true tree structure. We substitute the 3\\(^{rd}\\) dimension with the Likelihood scores, and we use the same colorscale to represent the likelihood of the proposed structures.</p> <pre><code>!cat example_2.toml\n</code></pre> <pre><code>!pear_ebi --config example_2.toml\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m138\u001b[0m trees;            \n File: Set_collection_\u001b[93mec4084c4-a5a7-4878-abcc-93c634208b6e\u001b[0m;\n Distance matrix: computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nIQtreeStartingTree_Trees; Containing \u001b[1;36m29\u001b[0m trees. \nMapleStartingTree_Trees; Containing \u001b[1;36m5\u001b[0m trees. \nParsimonyRAxMLStartingTree_GTRmodel_Trees; Containing \u001b[1;36m47\u001b[0m trees. \nRAxMLNGStartingTree_Trees; Containing \u001b[1;36m26\u001b[0m trees. \nUshERStartingTree_Trees; Containing \u001b[1;36m30\u001b[0m trees. \nTrueTreeSimulations; Containing \u001b[1;36m1\u001b[0m trees.\n\n\u001b[2K\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre>"},{"location":"tutorials/2Advanced%20use%20of%20pear_ebi.html#example-2-continued","title":"Example 2 Continued","text":"<p>We now show that we can easily run the same analyses in a very neat way by simply renaming our <code>.toml</code> file by simply renaming it <code>pear.toml</code>. </p> <pre><code>!pear_ebi\n</code></pre> <pre><code>\u001b[34mPEAR v0.\u001b[0m\u001b[1;34m1.85\u001b[0m\n\u001b[95mYour input:\u001b[0m\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing \u001b[1;36m138\u001b[0m trees;            \n File: Set_collection_\u001b[93mb87402e6-2e41-4902-8fd2-092a3f6c230a\u001b[0m;\n Distance matrix: computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nIQtreeStartingTree_Trees; Containing \u001b[1;36m29\u001b[0m trees. \nMapleStartingTree_Trees; Containing \u001b[1;36m5\u001b[0m trees. \nParsimonyRAxMLStartingTree_GTRmodel_Trees; Containing \u001b[1;36m47\u001b[0m trees. \nRAxMLNGStartingTree_Trees; Containing \u001b[1;36m26\u001b[0m trees. \nUshERStartingTree_Trees; Containing \u001b[1;36m30\u001b[0m trees. \nTrueTreeSimulations; Containing \u001b[1;36m1\u001b[0m trees.\n\n\u001b[2K\u001b[32m\u280b\u001b[0m \u001b[1;32mEmbedding distances...\u001b[0m0m\n\u001b[1A\u001b[2K\u001b[1;34mpcoa | Done!\u001b[0m\n\n\u001b[93m- Leaving PEAR -\u001b[0m\n</code></pre>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html","title":"3. How to use Pear on python","text":"<p>Here we report the code used to generate the examples in the manuscript, providing a general outline of the use of the python library</p> <p><code>tree_set</code> is the main module of <code>pear_ebi</code> - it contains both the tree_set and the set_collection objects.</p> <pre><code>from pear_ebi import tree_set\nimport numpy as np\nimport pandas as pd\nimport time\nimport os\n</code></pre>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#examples","title":"Examples","text":"<p>Here we do not delve into the specifics or the rationale of the experiments - for that we redirect you to the related manuscript - but rather focus on the use of the library to analyze sets of trees in different settings.</p>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#beast","title":"BEAST","text":""},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#bayesan-markow-chain-monte-carlo","title":"Bayesan - Markow Chain Monte Carlo","text":"<p>This is a relatively simple example: we have a few files containing trees in Newick format, where each set of trees is produced by a program that produced them sequentially. We want to represent the distribution of these trees in order to analyze the single trajectories and to compare the different trjectories coming from different runs.  With this idea in mind, we simply compute the square distance matrix using the <code>Robinson Foulds</code> metric, which generally represents the relations between trees in an effective way, using the most efficient algorithm: <code>hashrf</code>. We then compute and plot the <code>PCoA</code> embeddings in 2 and 3 dimensions. </p>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#step-1-load-trees","title":"Step 1: load trees","text":"<p>tree_set is meant to store and manage the analysis of a single set of trees stored in the same file. These trees have to be in the (standard) Newick format. <code>tree_set = tree_set.tree_set(file, output_file=None, distance_matrix=None, metadata=None)</code> The first argument indicates the file where the trees are stored. <code>output_file</code> can be empty and may be used to indicate a specific name and path for the output distance matrix. <code>distance_matrix</code> can be used to indicate a precomputed distance matrix in the <code>.csv</code> format. <code>metadata</code> may be used to indicate a <code>.csv</code> file with additional information relative to the trees. It must be of the same dimensionality of the set of trees, hence \\(size = (|trees|, |meta\\)-\\(variables|)\\). </p> <p>set_collection performs the same tasks of tree_set, but stores multiple set of trees. NB: for each file, a set of trees is defined within the set collection. In practice, a set_collection is a collection of different tree_set, each one containing a set of trees coming from a different file. It should not come as a surprise, then, that the input <code>collection=list()</code>, potentially empty (one may initialize an empty collection), is a list of files containing trees in the Newick format. <code>set_collection=tree_set.set_collection(collection=list(), file=\"Set_collection_\", output_file=None, distance_matrix=None, metadata=None,)</code> <code>file</code> may be used to indicate an alternative name for the file containing the collection information. This file will be used by pear to store information relative to the sets of trees. <code>output_file</code> may be used to indicate a specific name for the distance matrix file. <code>distance_matrix</code> can be used to indicate a precomputed distance matrix in the <code>.csv</code> format. <code>metadata</code> may be used to indicate a <code>.csv</code> file with additional information relative to the trees. It must be of the same dimensionality of the set of trees, hence \\(size = (|trees|, |meta\\)-\\(variables|)\\).</p> <pre><code>beast_dir = '../beast_trees'\nbeast_runs = [os.path.join(beast_dir, f\"beast_run{i}.trees\") for i in range(1,9)] + [os.path.join(beast_dir, f\"beast_long.trees\")]\nbeast_collection = tree_set.set_collection(beast_runs)\nprint(beast_collection)\n</code></pre> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500            \n Tree set collection containing 9009 trees;            \n File: Set_collection_d67b3fc3-bac4-4e5f-934c-0c8dc668f012;\n Distance matrix: not computed.                \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \nbeast_run1; Containing 1001 trees. \nbeast_run2; Containing 1001 trees. \nbeast_run3; Containing 1001 trees. \nbeast_run4; Containing 1001 trees. \nbeast_run5; Containing 1001 trees. \nbeast_run6; Containing 1001 trees. \nbeast_run7; Containing 1001 trees. \nbeast_run8; Containing 1001 trees. \nbeast_long; Containing 1001 trees.\n</code></pre>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#step-2-compute-distances","title":"Step 2: compute distances","text":"<pre><code>beast_collection.calculate_distances(method=\"hashrf_RF\") \n# where method can be chosen among hashrf_RF,\n# hashrf_wRF, smart_RF, tqdist_quartet, tqdist_triplet\n</code></pre> <pre><code>Output()\n</code></pre> <pre></pre> <pre>hashrf_RF | Done!\n</pre>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#step-3-compute-embeddings","title":"Step 3: compute embeddings","text":"<pre><code>beast_collection.embed(method=\"pcoa\", dimensions=3, quality=False)\n# where method can be chosen among pcoa, tsne, isomap, lle\n# pro tip: if the distance matrix has not been computed prior to calling this function,\n# it will automatically be computed using hashrf_RF\n</code></pre> <pre><code>Output()\n</code></pre> <pre></pre> <pre>pcoa | Done!\n</pre>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#step-4-plot-embeddings","title":"Step 4: Plot embeddings","text":"<pre><code>beast_collection.plot_2D(\n        method='pcoa', # method used for the embedding - if not previously computed, it will be computed when calling this function \n        save=False, # save the plot in a pdf format? The .html will be saved anyway!\n        name_plot=None, # specific name for the plot\n        static=False, # create a static element rather than a dynamic widget\n        plot_meta=\"SET-ID\", # meta-variable used to colour the points (trees)\n        plot_set=None, # select specific set of sets of trees in the collection for the plot\n        select=False, # create widgets to hide/display tree_sets in the graph\n        same_scale=False,) # use the same colorscale for each tree_set (useful when the same metric is compared among sets)\n</code></pre> <pre><code>beast_collection.plot_3D(\n        method='pcoa',\n        save=False,\n        name_plot=None,\n        static=False,\n        plot_meta=\"SET-ID\",\n        plot_set=None,\n        select=False,\n        same_scale=False,\n        z_axis=None,) # substitute the 3rd axis (Z-axis/3rd PCoA) with a meta-variable of choice\n</code></pre>"},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#raxml","title":"RAxML","text":""},{"location":"tutorials/3How%20to%20use%20pear_ebi%20on%20python%20and%20reproduce%20the%20examples%20on%20the%20paper.html#bootstrap-analysis","title":"Bootstrap Analysis   Maximum Likelihood Search","text":"<p>We do not delve into the biological interpretation of this specific example, as we discussed that in our manuscript.  Instead, we point your attention to some specific features of pear's interactive representations: <ul> <li> First: you can directly plot the <code>PCoA</code> embedding of the Robinson Foulds distances computed with <code>hashrf</code> without explicitly going through these steps. In fact, running a plotting function bypasses steps 2 and 3, performing them \"under the hood\";     <li> In the 2D representation:<ul> <li> From the dropdown menu, one can choose the meta-vatiable used to color the points in the graphs;         <li> The red button \"Save plot as pdf\" saves the plot in a <code>.pdf</code> file;         <li> The \\(#show <code>name of the tree set</code>\\) buttons allow showing and hiding specific sets of trees;         <li> One may choose between the scatter representation or a contour plot;         <li> While visualizing a contour plot, one may choose to hide or show the points (trees) with the light blue button \"Show points on a Contour plot\";         <li> One can choose between visualizing only the points or also the connections between them (indicating the progress through an hypotetical sequential order);         <li> One can use the native tools of the plot so zoom in to focus on a specific area of the graph;         <li> If one wants to focus their attention on specific sets of trees, they just have to click them: this will highlight the selected set and make the other sets transparent. One may continue and highlight on other sets by simply clicking on them. In order to go back to the original representation, one just needs to click on one of the previously highlighted sets for a second time.      <li> In the 3D representation:<ul> <li> Same features of the 2D representation. However, there is no contour plot in this case.   <pre><code>input_dir = '../bootstrap_mammals/'\nfiles = ([f'bootstrap_{i}' for i in [6086, 5261, 5092, 281, 11289, 10409]] + \n    [f'bestTree_{i}' for i in [6086, 5261, 5092, 281, 11289, 10409]])\ncollection = tree_set.set_collection([os.path.join(input_dir, f) for f in files])\nprint(collection)\n</code></pre>      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500                  Tree set collection containing 3656 trees;                  File: Set_collection_4cbb9500-1e98-40cd-84ec-a9c8bd511698;      Distance matrix: not computed.                     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      bootstrap_6086; Containing 500 trees.      bootstrap_5261; Containing 600 trees.      bootstrap_5092; Containing 800 trees.      bootstrap_281; Containing 600 trees.      bootstrap_11289; Containing 600 trees.      bootstrap_10409; Containing 550 trees.      bestTree_6086; Containing 1 trees.      bestTree_5261; Containing 1 trees.      bestTree_5092; Containing 1 trees.      bestTree_281; Containing 1 trees.      bestTree_11289; Containing 1 trees.      bestTree_10409; Containing 1 trees.      <pre><code>collection.plot_2D('pcoa', select=True)\n</code></pre> <pre><code>collection.plot_3D('pcoa', select = True)\n</code></pre>  MAPLE     In this specific example, we focus the readers' attention on the possibility of specifying a metadata file to add meta-variable and use them to color the points in the plots or to replace the $Z_{axis}$ in the 3D plot. In the cell below we specify a list of files containing trees and a list of files containing the likelihood of each tree.   <pre><code>maple_tree = [\n    \"IQtreeStartingTree_Trees\",\n    \"MapleStartingTree_Trees\",\n    \"ParsimonyRAxMLStartingTree_GTRmodel_Trees\",\n    \"RAxMLNGStartingTree_Trees\",\n    \"UshERStartingTree_Trees\",\n    \"TrueTreeSimulations\",\n    ]\n\nmaple_LK = [\n    \"IQtreeStartingTree_LK\",\n    \"MapleStartingTree_LK\",\n    \"ParsimonyRAxMLStartingTree_GTRmodel_LK\",\n    \"RAxMLNGStartingTree_LK\",\n    \"UshERStartingTree_LK\",\n]\n\nmaple_dir = '../MAPLE_res/'\n</code></pre>  In the cell below we check that \"DisMat_Maple.csv\", the precomputed distance matrix, is present in the folder. We precomputed the distances as the `smart_RF` algorithm, which computes a modified version of the Robinson Foulds metric, takes much longer than `hashrf_RF`.    <pre><code>set_list = [os.path.join(maple_dir, tree) for tree in maple_tree]\ntry:collection_maple = tree_set.set_collection(set_list, distance_matrix = \"DistMat_Maple.csv\")\nexcept:collection_maple = tree_set.set_collection(set_list)\nfinally:print(collection_maple)\n</code></pre>      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500                  Tree set collection containing 138 trees;                  File: Set_collection_17e30756-0754-4fbb-9ed7-cb862716a7f8;      Distance matrix: computed.                     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      IQtreeStartingTree_Trees; Containing 29 trees.      MapleStartingTree_Trees; Containing 5 trees.      ParsimonyRAxMLStartingTree_GTRmodel_Trees; Containing 47 trees.      RAxMLNGStartingTree_Trees; Containing 26 trees.      UshERStartingTree_Trees; Containing 30 trees.      TrueTreeSimulations; Containing 1 trees.     This is how we extracted the information from multiple files - one may simply skip this step as we then saved the information in the \"Likelihoods.csv\" file.   <pre><code>LKs = dict()\nfor lk_file in maple_LK:\n    file = os.path.join(maple_dir, lk_file)\n    with open(file, 'r') as f:\n        LKs[lk_file] = np.array(f.readlines())\n        f.close()\n\nLK = list()\nfor lk in LKs.values(): LK.extend(lk)\n\nLK = np.array([tree.replace('\\n', '') for tree in LK], dtype=np.float64)\nLK = np.concatenate([LK,np.array([-257513])], axis = 0)\nLK = np.interp(LK, (LK.min(), LK.max()), (0, +1)) # scale LKs between 0 and 1\n\ndf_LK = pd.DataFrame({'LK':LK})\ndf_LK.to_csv(\"Likelihoods.csv\")\ndf_LK\n</code></pre> LK 0 0.983439 1 0.983822 2 0.984404 3 0.985124 4 0.985631 ... ... 133 0.999844 134 0.999850 135 0.999976 136 1.000000 137 0.706890 <p>138 rows \u00d7 1 columns</p>     There are two ways to introduce new variables in a set_collection's or tree_set's metadata:   <pre><code># Method 1:\n# Given that metadata is a pandas dataframe, \n# one may simply add columns to it!\ndf_LK = pd.read_csv(\"Likelihoods.csv\")\ncollection_maple.metadata['LK'] = df_LK['LK']\ncollection_maple.metadata\n</code></pre>      .dataframe tbody tr th:only-of-type {         vertical-align: middle;     }      .dataframe tbody tr th {         vertical-align: top;     }      .dataframe thead th {         text-align: right;     }  SET-ID STEP LK 0 IQtreeStartingTree_Trees 0 0.983439 1 IQtreeStartingTree_Trees 1 0.983822 2 IQtreeStartingTree_Trees 2 0.984404 3 IQtreeStartingTree_Trees 3 0.985124 4 IQtreeStartingTree_Trees 4 0.985631 ... ... ... ... 133 UshERStartingTree_Trees 26 0.999844 134 UshERStartingTree_Trees 27 0.999850 135 UshERStartingTree_Trees 28 0.999976 136 UshERStartingTree_Trees 29 1.000000 137 TrueTreeSimulations 0 0.706890 <p>138 rows \u00d7 3 columns</p> <pre><code># Method 2:\n# One may specify a file with additional \n# metadata when the object is created\ncollection_maple = tree_set.set_collection(set_list, distance_matrix = \"DistMat_Maple.csv\", metadata=\"Likelihoods.csv\")\ncollection_maple.metadata\n</code></pre>      .dataframe tbody tr th:only-of-type {         vertical-align: middle;     }      .dataframe tbody tr th {         vertical-align: top;     }      .dataframe thead th {         text-align: right;     }  SET-ID STEP LK 0 IQtreeStartingTree_Trees 0 0.983439 1 IQtreeStartingTree_Trees 1 0.983822 2 IQtreeStartingTree_Trees 2 0.984404 3 IQtreeStartingTree_Trees 3 0.985124 4 IQtreeStartingTree_Trees 4 0.985631 ... ... ... ... 133 UshERStartingTree_Trees 26 0.999844 134 UshERStartingTree_Trees 27 0.999850 135 UshERStartingTree_Trees 28 0.999976 136 UshERStartingTree_Trees 29 1.000000 137 TrueTreeSimulations 0 0.706890 <p>138 rows \u00d7 3 columns</p>     If, for any reason, the \"DisMat_Maple.csv\" is not present in the folder, we need to compute the distance matrix. We chose to upload the precomputed distance matrix as the `smart_RF` method takes much longer to compute than `hashrf_RF`, and we wanted this notebook to run smoothly and rapidly.   <pre><code>if collection_maple.distance_matrix is None:\n    start = time.time()\n    collection_maple.calculate_distances('days_RF')\n    np.savetxt(\"DistMat_Maple.csv\", collection_maple.distance_matrix, delimiter=\",\")\n    print(time.time() - start)\ncollection_maple.distance_matrix.shape\n</code></pre>         (138, 138)    We colour the trees based on their likelihood in the 2D plot, while we replace the $Z_{axis}$ with the likelihood in the 3D plot.  `same_scale` makes sure that points with the same value have the same colour in the graphs.   <pre><code>collection_maple.plot_3D('pcoa', plot_meta = 'LK', same_scale = True, select = True)\n</code></pre> <pre><code>collection_maple.plot_3D('pcoa', plot_meta = 'LK', same_scale = True, select = True, z_axis = 'LK')\n</code></pre>  What if I wanted to make one of these trees to \"pop out\"? Well, we can add a coulumn called `\"highlight\"` that will automatically be read by the plotting function to \"highloght\" the points specified. The columns has to be binary (0s and 1s), where the 1s indicate that a tree should be highlighted. It is crucial here to know the order and size of the sets, as the column is shared by the whole collection. Note that: the vector `\"highlight\"` must be integer (dtype = int)!.   Easy example:  we want to highight the true tree, which is the last in the collection.   <pre><code>highlight_mask = np.zeros(collection_maple.metadata.shape[0], dtype=int) # vector of 0s with size = n_trees\nhighlight_mask[-1] = 1 # last element set to 1\ncollection_maple.metadata['highlight'] = highlight_mask\ncollection_maple.metadata\n</code></pre>      .dataframe tbody tr th:only-of-type {         vertical-align: middle;     }      .dataframe tbody tr th {         vertical-align: top;     }      .dataframe thead th {         text-align: right;     }  SET-ID STEP LK highlight 0 IQtreeStartingTree_Trees 0 0.983439 0 1 IQtreeStartingTree_Trees 1 0.983822 0 2 IQtreeStartingTree_Trees 2 0.984404 0 3 IQtreeStartingTree_Trees 3 0.985124 0 4 IQtreeStartingTree_Trees 4 0.985631 0 ... ... ... ... ... 133 UshERStartingTree_Trees 26 0.999844 0 134 UshERStartingTree_Trees 27 0.999850 0 135 UshERStartingTree_Trees 28 0.999976 0 136 UshERStartingTree_Trees 29 1.000000 0 137 TrueTreeSimulations 0 0.706890 1 <p>138 rows \u00d7 4 columns</p> <pre><code>collection_maple.plot_2D('pcoa', plot_meta = 'LK', same_scale = True, select = False, static = True)\n</code></pre>  Hard (not really) example: we want to highight the true tree, and the last tree of each set. In order to perform this task, we can exploit an additional tool: the `set_collection.data`. This object contains some useful information regarding the structure of each set composing the collection. In particular, we may be interested in the `n_trees` variable which can be used to assess the size of each set!    <pre><code># this is the object --&gt; collection_maple.data # Note that this is a nested dictionary\nfor Tset, info in collection_maple.data.items():\n    print(Tset, f\"has {info['n_trees']} trees\")\n</code></pre>      IQtreeStartingTree_Trees has 29 trees     MapleStartingTree_Trees has 5 trees     ParsimonyRAxMLStartingTree_GTRmodel_Trees has 47 trees     RAxMLNGStartingTree_Trees has 26 trees     UshERStartingTree_Trees has 30 trees     TrueTreeSimulations has 1 trees    <pre><code>highlight_mask = np.zeros(collection_maple.metadata.shape[0], dtype=int)\nlast_tree = 0\nfor Tset, info in collection_maple.data.items():\n    last_tree += info[\"n_trees\"]\n    highlight_mask[last_tree - 1] = 1\ncollection_maple.metadata['highlight'] = highlight_mask\ncollection_maple.metadata\n</code></pre>      .dataframe tbody tr th:only-of-type {         vertical-align: middle;     }      .dataframe tbody tr th {         vertical-align: top;     }      .dataframe thead th {         text-align: right;     }  SET-ID STEP LK highlight 0 IQtreeStartingTree_Trees 0 0.983439 0 1 IQtreeStartingTree_Trees 1 0.983822 0 2 IQtreeStartingTree_Trees 2 0.984404 0 3 IQtreeStartingTree_Trees 3 0.985124 0 4 IQtreeStartingTree_Trees 4 0.985631 0 ... ... ... ... ... 133 UshERStartingTree_Trees 26 0.999844 0 134 UshERStartingTree_Trees 27 0.999850 0 135 UshERStartingTree_Trees 28 0.999976 0 136 UshERStartingTree_Trees 29 1.000000 1 137 TrueTreeSimulations 0 0.706890 1 <p>138 rows \u00d7 4 columns</p> <pre><code>collection_maple.plot_2D('pcoa', plot_meta = 'LK', same_scale = True, select = False)\n</code></pre>"}]}